!pip install ultralytics

from  google.colab import drive
drive.mount('/content/drive')

!ls "/content/drive/MyDrive/dataset2.zip"

!unzip "/content/drive/MyDrive/dataset2.zip" -d /content/data

!ls /content/data

!ls /content/data/yolo_dataset

yaml_content = """
train: /content/data/yolo_dataset/images/train
val: /content/data/yolo_dataset/images/val

nc:1
names: ['drone']
"""
with open('/content/data/data.yaml','w') as f:
    f.write(yaml_content)
from ultralytics import YOLO
!yolo task=detect mode=train model=yolov8m.pt data=/content/data/data.yaml epochs=30 imgsz=640

!find /content -type d -name "train"

!zip -r /content/runs/detect/train.zip /content/runs/detect/train

from google.colab import files
files.download("/content/runs/detect/train.zip")

yaml_content="""
path: /content/data/yolo_dataset
train: images/train
val: images/test

names: 0: drone
"""
with open("/content/data.yaml",'w') as f:
    f.write(yaml_content)

!cat /content/data.yaml

!ls -R /content

from ultralytics import YOLO
model=YOLO("runs/detect/train/weights/best.pt")
model.val(data="/content/data.yaml", save=True, save_txt=True, save_conf=True)

model.val(data="/content/data.yaml", save=True, save_txt=True, save_conf=True, conf= 0.01)

model=YOLO("runs/detect/train/weights/best.pt")
model.predict(
    source='/content/data/yolo_dataset/images/test',
    conf=0.01,
    save=True,
    save_txt=True,
    save_conf=True,
    name="predict2"
)

!ls -l /content/runs/detect/predict2/labels | head -10

from PIL import Image
import os
img_dir = "/content/data/yolo_dataset/images/test"
sample_imgs = [f for f in os.listdir(img_dir) if f.lower().endswith(('.jpg','.jpeg','.png'))][:5]
for img_name in sample_imgs:
    img_path = os.path.join(img_dir,img_name)
    with Image.open(img_path) as img:
        print(f"{img_name}: {img_size}")

import os
from tqdm import tqdm
import pandas as pd

gt_path = "/content/data/yolo_dataset/labels/test"
pred_path = "/content/runs/detect/predict2/labels"

img_width, img_height = 1280, 720
iou_threshold, confidence_threshold = 0.3, 0.3

results = { 'small' : {'TP': 0, 'FP': 0, 'FN': 0},
	    'medium' : {'TP': 0, 'FP': 0, 'FN': 0},
            'large' : {'TP': 0, 'FP': 0, 'FN': 0}}

def yolo_to_xywh(box,img_w,img_h):
    xc, yc, w, h = box
    return [xc * img_w, yc * img_h, w * img_w, h * img_h]

def compute_area(box): return box[2]*box[3]

def get_size_category(area):
    if area < 32*32:
        return 'small'
    elif area<=96*96:
        return 'medium'
    else:
        return 'large'
def compute_iou(box1, box2):
    x1, y1, w1, h1 = box1
    x2, y2, w2, h2 = box2
    xa1, ya1, xa2, ya2 = x1-w1/2, y1-h1/2, x1+w1/2, y1+h1/2
    xb1, yb1, xb2, yb2 = x2-w2/2, y2-h2/2, x2+w2/2, y2+h2/2
    inter_area = max(0, min(xa2, xb2) - max(xa1, xb1) * max(0, min(ya2,yb2) - max(ya1, yb1))
    box1_area, box2_area = w1*h1, w2*h2
    union = box1_area + box2_area - inter_area
    return inter_area / union if union else 0
for fname in tqdm(os.listdir(gt_path)):
    if not fname.endswith('.txt'): continue
    with open(os.path.join(gt_path, fname), 'r') as f: gt_lines = f.readlines()
    pred_file_path = os.path.join(pred_path, fname)
    if not os.path.exists(pred_file_path): continue
    with open(pred_file_path,'r') as f: pred_lines = f.readlines()
      
    gt_boxes = [list(map(float, line.strip().split()[1:])) for line in gt_lines]
    pred_boxes = [list(map(float, line.strip().split()[1:5])) for line in pred_lines if len(line.strip().split()) >=6 and float(line.strip(

    matched=set()
    for gt in gt_boxes:
        box_gt = yolo_to_xywh(gt,img_width,img_height)
        size = get_size_category(compute_area(box_gt))
        found_match = False
        for i,pred in enumerate(pred_boxes):
            if i in matched: continue
            box_pred = yolo_to_xywh(pred, img_width, img_height)
            if compute_iou(box_gt, box_pred)>=iou_threshold:
                results[size]['TP']+=1
                matched.add(i)
                found_match =True
                break
        if not found_match:
            results[size]['FN']+=1
    for i in range(len(pred_boxes)):
        if i not in matched:
            box_pred = yolo_to_xywh(pred_boxes[i], img_width, img_height)
            size = get_size_category(compute_area(box_pred))
            results[size]['FP']+=1
rows=[]
for size in ['small','medium','large']:
    TP, FP, FN = results[size]['TP'], results[size]['FP'], results[size]['FN']
    precision = TP /(TP+FP) if (TP+FP) else 0
    recall = TP/(TP+FN) if (TP+FN) else 0
    ap = precision*recall
    rows.append({"Size": size, "TP": TP, "FP": FP, "FN": FN, "Precision": round(precision,3), "Recall": round(recall,3), "mAP@0.5": round(ap,3)})
df=pd.DataFrame(rows)
df.to_excel("/content/size_wise_results.xlsx",index=False)
print("Size-wise evaluation saved to /content/size_wise_results.xlsx")

from google.colab import files
files.download("/content/size_wise_results.xlsx")

from ultralytics import YOLO
model=YOLO("runs/detect/train/weights/best.pt")
metrics=model.val(data="/content/data.yaml",save=True,save_txt=True,save_conf=True)




