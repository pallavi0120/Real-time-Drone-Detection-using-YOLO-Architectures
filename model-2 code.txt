!pip install ultralytics --upgrade

from google.colab import drive
drive.mount('/content/drive')

!unzip "/content/drive/MyDrive/new.zip" -d /content/data

!ls /content/data/new/train/images
!ls /content/data/new/valid/images

data_yaml = """
 train: /content/data/new/train/images
 val: /content/data/new/valid/images
 nc: 2
 names: ['class1', 'class2']
 """
with open('/content/data.yaml', 'w') as f:
    f.write(data_yaml)

!wget https://github.com/ultralytics/assets/releases/download/v8.3.0/yolov10n.pt

!yolo task=detect mode=train model=yolov10n.pt data=/content/data.yaml epochs=30 imgsz=640 name=yolov10n_model

!zip -r /content/yolov10n_model2.zip /content/runs/detect/yolov10n_model2

from google.colab import files
files.download("/content/yolov10n_model2.zip")

!yolo task=detect mode=predict model=/content/runs/detect/yolov10n_model2/weights/best.pt \source=/content/data/new/test/images/'seq 1' conf=0.25

!ls /content/runs/detect/yolov10n_model2/weights

model_path = "/content/runs/detect/yolov10n_model2/weights/best.pt"

!ls /content/runs/detect

pred_path = "/content/runs/detect/val2/labels"
results = {'small': {'TP': 0, 'FP': 0, 'FN': 0},
           'medium': {'TP': 0, 'FP': 0, 'FN': 0},
           'large': {'TP': 0, 'FP': 0, 'FN': 0}}

excel_path = "/content/yolov10n_test_evaluation_results.xlsx"
df.to_excel(excel_path, index=False)
from google.colab import files
files.download(excel_path)

from google.colab import files
import zipfile

print("Upload yolov10n_model2.zip (from Downloads)")
uploaded = files.upload()
with zipfile.ZipFile("yolov10n_model2.zip", 'r') as zip_ref:
    zip_ref.extractall("/content/")

print("Now upload my_dataset.zip (from ML Internship folder)")
uploaded = files.upload()
with zipfile.ZipFile("my_dataset.zip", 'r') as zip_ref:
    zip_ref.extractall("/content/")

! pip install ultralytics --quiet
from ultralytics import YOLO
import os
import shutil
import numpy as np
from tqdm import tqdm

import zipfile
with zipfile.ZipFile("my_dataset.zip", 'r') as zip_ref:
    zip_ref.extractall("/content/")
print("Re-extracted my_dataset.zip to restore the original folders")

import os
    for root, dirs, files in os.walk("/content/new"):
        for d in dirs:
            if "seq 1" in d.lower():
                print("Found folder:", os.path.join(root, d))

import os
import shutil
src = "/content/new/test/labels/seq 1"
dst = "/content/new/test/labels"
os.makedirs(dst, exist_ok=True)
moved = 0
for file in os.listdir(src):
    if file.endswith(".txt"):
        shutil.copy(os.path.join(src, file), os.path.join(dst, file))
        moved += 1
print(f" Moved {moved} test label files from 'seq 1' to {dst}")

yaml_content = """
 path: /content/new
 train: train/images
 val: test/images
 names:
  0: drone
 """
with open("/content/new/dataset.yaml", "w") as f:
    f.write(yaml_content)
print("dataset.yaml updated")

import os
for root, dirs, files in os.walk("/content"):
    for file in files:
        if file.endswith(".pt"):
            print("Found model:", os.path.join(root, file))

model_path = "/content/content/runs/detect/yolov10n_model2/weights/best.pt"
model = YOLO(model_path)

model.val(data="/content/new/dataset.yaml", save=True, save_txt=True, save_conf=True)

!ls /content/runs/detect/

gt_path = "/content/new/test/labels"
pred_path = "/content/runs/detect/val/labels"

import os
from tqdm import tqdm
img_width = 640
img_height = 512
iou_threshold = 0.3
confidence_threshold = 0.3
results = {'small': {'TP': 0, 'FP': 0, 'FN': 0},
           'medium': {'TP': 0, 'FP': 0, 'FN': 0},
           'large': {'TP': 0, 'FP': 0, 'FN': 0}}

def yolo_to_xywh(box, img_w, img_h):
    xc, yc, w, h = box
    return [xc * img_w, yc * img_h, w * img_w, h * img_h]
def compute_area(box):
    return box[2] * box[3]
def get_size_category(area):
    if area < 32 * 32:
        return 'small'
    elif area <= 96 * 96 and area>=32*32:
        return 'medium'
    else:
        return 'large'
def compute_iou(box1, box2):
    x1_1 = box1[0] - box1[2] / 2
    y1_1 = box1[1] - box1[3] / 2
    x2_1 = box1[0] + box1[2] / 2
    y2_1 = box1[1] + box1[3] / 2
    x1_2 = box2[0] - box2[2] / 2
    y1_2 = box2[1] - box2[3] / 2
    x2_2 = box2[0] + box2[2] / 2
    y2_2 = box2[1] + box2[3] / 2
    xi1 = max(x1_1, x1_2)
    yi1 = max(y1_1, y1_2)
    xi2 = min(x2_1, x2_2)
    yi2 = min(y2_1, y2_2)
    inter_area = max(0, xi2 - xi1) * max(0, yi2 - yi1)
    box1_area = (x2_1 - x1_1) * (y2_1 - y1_1)
    box2_area = (x2_2 - x1_2) * (y2_2 - y1_2)
    union_area = box1_area + box2_area - inter_area
    return inter_area / union_area if union_area != 0 else 0
for fname in tqdm(os.listdir(gt_path)):
    if not fname.endswith('.txt'):
        continue
    gt_file = os.path.join(gt_path, fname)
    pred_file = os.path.join(pred_path, fname)
    if not os.path.exists(pred_file):
        continue
    with open(gt_file, 'r') as f:
        gt_lines = f.readlines()
    with open(pred_file, 'r') as f:
        pred_lines = f.readlines()
    gt_boxes = [list(map(float, line.strip().split()[1:])) for line in gt_lines]
    pred_boxes = []
    for line in pred_lines:
        parts = line.strip().split()
        if len(parts) >= 6 and float(parts[5]) >= confidence_threshold:
            pred_boxes.append(list(map(float, parts[1:5])))
    matched = set()
    for gt in gt_boxes:
        box_gt = yolo_to_xywh(gt, img_width, img_height)
        area = compute_area(box_gt)
        size = get_size_category(area)
        found_match = False
        for i, pred in enumerate(pred_boxes):
            box_pred = yolo_to_xywh(pred, img_width, img_height)
            iou = compute_iou(box_gt, box_pred)
            if iou >= iou_threshold and i not in matched:
                results[size]['TP'] += 1
                matched.add(i)
                found_match = True
                break
        if not found_match:
             results[size]['FN'] += 1
    for i in range(len(pred_boxes)):
        if i not in matched:
            box_pred = yolo_to_xywh(pred_boxes[i], img_width, img_height)
            size = get_size_category(compute_area(box_pred))
            results[size]['FP'] += 1
print("Evaluation complete.")
 
import pandas as pd
 
rows = []
for size in ['small', 'medium', 'large']:
    TP = results[size]['TP']
    FP = results[size]['FP']
    FN = results[size]['FN']
    precision = TP / (TP + FP) if (TP + FP) else 0
    recall = TP / (TP + FN) if (TP + FN) else 0
    ap = precision * recall  # Approx mAP@0.5
    rows.append({
        "Size": size.capitalize(),
        "TP": TP,
        "FP": FP,
        "FN": FN,
        "Precision": round(precision, 3),
        "Recall": round(recall, 3),
        "mAP@0.5": round(ap, 3)
    })
df = pd.DataFrame(rows)
excel_path = "/content/test_evaluation_results.xlsx"
df.to_excel(excel_path, index=False)
print(f"Excel saved at: {excel_path}")

from google.colab import files
files.download("/content/test_evaluation_results.xlsx")